name: CI

permissions:
  contents: read

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**' 
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml' 
      - 'uv.lock'
      - '.github/workflows/ci.yml'

# Prevent multiple CI runs for the same ref
concurrency:
  group: ci-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run ruff format check
        run: uv run ruff format --check .

      - name: Run ruff lint
        run: uv run ruff check .

      - name: Run unit tests
        run: uv run pytest -m unit -v --tb=short

      - name: Run integration tests (without API)
        run: uv run pytest -m "integration and not requires_api and not requires_ollama and not requires_paperless" -v --tb=short

      - name: Generate coverage report
        run: uv run pytest -m "unit or (integration and not slow)" --cov=src/bank_statement_separator --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  test-with-api:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[api-test]'))
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run API-dependent tests
        run: uv run pytest -m requires_api -v --tb=short
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    if: success()

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Run safety check
        run: uv run safety check

      - name: Run bandit security scan
        run: uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
