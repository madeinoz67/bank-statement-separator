name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        type: string

# Prevent multiple releases for the same tag
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run tests
        run: uv run pytest tests/unit/ -v

      - name: Build package
        run: uv build

      - name: Set release tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_tag.outputs.tag }}
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz

      - name: Log docs deployment trigger
        run: |
          echo "âœ… Release created for tag ${{ steps.set_tag.outputs.tag }}"
          echo "Docs deployment will be triggered automatically by the release event"

  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: release
    if: needs.release.result == 'success' && ((github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch')

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group dev

      - name: Build package
        run: uv build

      - name: Publish to PyPI
        run: |
          uv run twine upload dist/* --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
