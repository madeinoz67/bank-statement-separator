name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v0.1.3)"
        required: true
        type: string
      skip_pypi:
        description: "Skip PyPI publishing (for testing)"
        required: false
        type: boolean
        default: false

# Prevent multiple releases for the same tag
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run tests
        run: uv run pytest tests/unit/ -v

      - name: Build package
        run: uv build

      - name: Set release tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_tag.outputs.tag }}
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz

      - name: Log docs deployment trigger
        run: |
          echo "✅ Release created for tag ${{ steps.set_tag.outputs.tag }}"
          echo "Docs deployment will be triggered automatically by the release event"

  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: release
    if: needs.release.result == 'success' && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch') && (github.event_name != 'workflow_dispatch' || github.event.inputs.skip_pypi != 'true')

    steps:
      - uses: actions/checkout@v4

      - name: Debug workflow context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Release job result: ${{ needs.release.result }}"
          echo "Contains refs/tags: ${{ contains(github.ref, 'refs/tags/') }}"
          echo "PYPI_API_TOKEN exists: ${{ secrets.PYPI_API_TOKEN != '' }}"
          echo "Skip PyPI input: ${{ github.event.inputs.skip_pypi || 'not-set' }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group dev

      - name: Build package
        run: uv build

      - name: Verify package
        run: |
          uv run twine check dist/*
          ls -la dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "❌ PYPI_API_TOKEN secret is empty or not set"
            exit 1
          fi
          echo "✅ PYPI_API_TOKEN is configured"
          uv run twine upload dist/* --verbose
