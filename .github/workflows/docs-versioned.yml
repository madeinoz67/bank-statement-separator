name: Deploy Versioned Documentation

# Prevent concurrent deployments to avoid gh-pages conflicts
# Use a single queue for all documentation deployments
concurrency:
  group: docs-deployment-gh-pages
  cancel-in-progress: false

on:
  push:
    branches: [main]
    paths:
      - "docs/**/*.md"
      - "docs/**/*.yml" 
      - "docs/**/*.yaml"
      - "mkdocs.yml"
      - ".github/workflows/docs-versioned.yml"
  release:
    types: [published]
  repository_dispatch:
    types: [release-triggered]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy (e.g., v1.0.0, or 'latest')"
        required: false
        default: "latest"

permissions:
  contents: write

jobs:
  determine-deployment-type:
    runs-on: ubuntu-latest
    outputs:
      deploy_latest: ${{ steps.check.outputs.deploy_latest }}
      deploy_version: ${{ steps.check.outputs.deploy_version }}
      version: ${{ steps.check.outputs.version }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Determine deployment type
        id: check
        run: |
          # Initialize deployment flags
          DEPLOY_LATEST="false"
          DEPLOY_VERSION="false"
          SHOULD_DEPLOY="false"
          VERSION="unknown"
          
          echo "üîç Event: ${{ github.event_name }}"
          echo "üîç Ref: ${{ github.ref }}"
          
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "üìù Push to main branch detected"
            DEPLOY_LATEST="true"
            VERSION="latest"
            SHOULD_DEPLOY="true"
            
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "üöÄ Release event detected"
            DEPLOY_VERSION="true"
            VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')
            SHOULD_DEPLOY="true"
            echo "üìã Release version: $VERSION"
            
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "üì° Repository dispatch detected"
            DEPLOY_VERSION="true"
            VERSION=$(echo ${{ github.event.client_payload.tag }} | sed 's/^v//')
            SHOULD_DEPLOY="true"
            echo "üìã Dispatch version: $VERSION"
            
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üîÑ Manual workflow dispatch detected"
            INPUT_VERSION="${{ github.event.inputs.version }}"
            echo "üìã Input version: $INPUT_VERSION"
            
            if [ "$INPUT_VERSION" = "latest" ] || [ -z "$INPUT_VERSION" ]; then
              echo "üìù Deploying to latest"
              DEPLOY_LATEST="true"
              VERSION="latest"
            else
              echo "üìù Deploying versioned: $INPUT_VERSION"
              DEPLOY_VERSION="true"
              VERSION=$(echo "$INPUT_VERSION" | sed 's/^v//')
            fi
            SHOULD_DEPLOY="true"
            
          else
            echo "‚ùå Unhandled event type: ${{ github.event_name }}"
            # Don't deploy anything for unhandled events
          fi
          
          # Output results
          echo "deploy_latest=$DEPLOY_LATEST" >> $GITHUB_OUTPUT
          echo "deploy_version=$DEPLOY_VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          # Log final decision
          echo "üìä Final decision:"
          echo "  - Deploy Latest: $DEPLOY_LATEST"
          echo "  - Deploy Version: $DEPLOY_VERSION"  
          echo "  - Version: $VERSION"
          echo "  - Should Deploy: $SHOULD_DEPLOY"

  # Safety check job to prevent accidental no-ops
  verify-deployment-decision:
    runs-on: ubuntu-latest
    needs: determine-deployment-type
    if: needs.determine-deployment-type.outputs.should_deploy != 'true'
    steps:
      - name: Warn about no deployment
        run: |
          echo "‚ö†Ô∏è WARNING: No deployment will occur for this trigger"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "This may be intentional, but please verify the workflow logic"

  deploy-latest:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: determine-deployment-type
    if: needs.determine-deployment-type.outputs.deploy_latest == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Configure git for mike
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local pull.rebase false

      - name: Deploy latest documentation with mike
        run: |
          echo "üìö Deploying LATEST documentation..."
          
          # Robust deployment strategy with retry logic and conflict resolution
          
          # Step 1: Fetch and prepare gh-pages branch
          echo "üì° Fetching latest gh-pages state..."
          git fetch origin gh-pages:gh-pages || git checkout --orphan gh-pages || true
          
          # Step 2: Deploy locally (no push)
          echo "üîß Building and deploying locally..."
          uv run mike deploy --update-aliases latest
          uv run mike set-default latest
          
          # Step 3: Push with retry logic and conflict resolution
          echo "üöÄ Pushing to gh-pages with retry logic..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üì§ Deployment attempt $attempt of $max_attempts"
            
            # Fetch latest changes before push attempt
            git fetch origin gh-pages:gh-pages || true
            
            if git push origin gh-pages; then
              echo "‚úÖ Successfully deployed LATEST on attempt $attempt"
              break
            else
              echo "‚ö†Ô∏è Push failed on attempt $attempt"
              
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå All attempts failed. Manual intervention required."
                exit 1
              fi
              
              # Exponential backoff
              sleep_time=$((2 ** attempt))
              echo "‚è≥ Waiting ${sleep_time} seconds before retry..."
              sleep $sleep_time
              
              # Resolve conflicts and retry
              echo "üîÑ Resolving conflicts and re-deploying..."
              git checkout gh-pages || true
              git pull --rebase origin gh-pages || git reset --hard origin/gh-pages
              
              # Re-deploy locally after conflict resolution
              uv run mike deploy --update-aliases latest
              uv run mike set-default latest
            fi
            
            attempt=$((attempt + 1))
          done

      - name: Log deployment completion
        run: echo "‚úÖ Latest documentation deployed successfully to https://madeinoz67.github.io/bank-statement-separator/"

  deploy-version:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: determine-deployment-type
    if: needs.determine-deployment-type.outputs.deploy_version == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Configure git for mike
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local pull.rebase false

      - name: Deploy versioned documentation with mike
        run: |
          VERSION="${{ needs.determine-deployment-type.outputs.version }}"
          echo "üìã Deploying VERSIONED documentation: v$VERSION"
          
          # Validate version format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?(-[a-zA-Z0-9]+)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          
          # Robust deployment strategy with retry logic and conflict resolution
          
          # Step 1: Fetch and prepare gh-pages branch
          echo "üì° Fetching latest gh-pages state..."
          git fetch origin gh-pages:gh-pages || git checkout --orphan gh-pages || true
          
          # Step 2: Deploy locally (no push)
          echo "üîß Building and deploying v$VERSION locally..."
          uv run mike deploy --update-aliases "v$VERSION" "$VERSION"
          
          # Step 3: Push with retry logic and conflict resolution
          echo "üöÄ Pushing to gh-pages with retry logic..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üì§ Deployment attempt $attempt of $max_attempts for version v$VERSION"
            
            # Fetch latest changes before push attempt
            git fetch origin gh-pages:gh-pages || true
            
            if git push origin gh-pages; then
              echo "‚úÖ Successfully deployed version v$VERSION on attempt $attempt"
              break
            else
              echo "‚ö†Ô∏è Push failed on attempt $attempt for version v$VERSION"
              
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå All attempts failed for version v$VERSION. Manual intervention required."
                exit 1
              fi
              
              # Exponential backoff
              sleep_time=$((2 ** attempt))
              echo "‚è≥ Waiting ${sleep_time} seconds before retry..."
              sleep $sleep_time
              
              # Resolve conflicts and retry
              echo "üîÑ Resolving conflicts and re-deploying version v$VERSION..."
              git checkout gh-pages || true
              git pull --rebase origin gh-pages || git reset --hard origin/gh-pages
              
              # Re-deploy locally after conflict resolution
              uv run mike deploy --update-aliases "v$VERSION" "$VERSION"
            fi
            
            attempt=$((attempt + 1))
          done

      - name: Update version list for selector
        run: |
          VERSION="${{ needs.determine-deployment-type.outputs.version }}"
          echo "‚úÖ Versioned deployment complete for v$VERSION"
          echo "üîß Mike automatically handles version selector via built-in functionality"
          echo "üìç Version available at: https://madeinoz67.github.io/bank-statement-separator/v$VERSION/"

      - name: Log deployment completion
        run: |
          VERSION="${{ needs.determine-deployment-type.outputs.version }}"
          echo "‚úÖ Versioned documentation deployed successfully"
          echo "üìã Version: v$VERSION"
          echo "üåê URL: https://madeinoz67.github.io/bank-statement-separator/v$VERSION/"